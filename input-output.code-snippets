{
	"Buffered IO": {
			"scope": "python",
			"prefix": "io1",
			"body": [
				"import os",
				"import sys",
				"from io import BytesIO, IOBase",
				"BUFSIZE = 8192",
				"class FastIO(IOBase):",
				"\tnewlines = 0",
				"\tdef __init__(self, file):",
				"\t\tself._fd = file.fileno()",
				"\t\tself.buffer = BytesIO()",
				"\t\tself.writable = 'x' in file.mode or 'r' not in file.mode",
				"\t\tself.write = self.buffer.write if self.writable else None",
				"\tdef read(self):",
				"\t\twhile True:",
				"\t\t\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))",
				"\t\t\tif not b:break",
				"\t\t\tptr = self.buffer.tell()",
				"\t\t\tself.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)",
				"\t\tself.newlines = 0",
				"\t\treturn self.buffer.read()",
				"\tdef readline(self):",
				"\t\twhile self.newlines == 0:",
				"\t\t\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))",
				"\t\t\tself.newlines = b.count(b'\\n') + (not b)",
				"\t\t\tptr = self.buffer.tell()",
				"\t\t\tself.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)",
				"\t\tself.newlines -= 1",
				"\t\treturn self.buffer.readline()",
				"\tdef flush(self):",
				"\t\tif self.writable:",
				"\t\t\tos.write(self._fd, self.buffer.getvalue())",
				"\t\t\tself.buffer.truncate(0), self.buffer.seek(0)",
				"class IOWrapper(IOBase):",
				"\tdef __init__(self, file):",
				"\t\tself.buffer = FastIO(file)",
				"\t\tself.flush = self.buffer.flush",
				"\t\tself.writable = self.buffer.writable",
				"\t\tself.write = lambda s: self.buffer.write(s.encode('ascii'))",
				"\t\tself.read = lambda: self.buffer.read().decode('ascii')",
				"\t\tself.readline = lambda: self.buffer.readline().decode('ascii')",
				"sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)",
				"input = lambda: sys.stdin.readline().rstrip('\\r\\n')"
			],
			"description": "Fast Input Output - 1"
		}
}

